import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
from dotenv import load_dotenv
from datetime import datetime, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    ADMIN_IDS = [int(id) for id in os.environ['ADMIN_IDS'].split(',')]
    GROUP_ID = int(os.environ.get('GROUP_ID', 0))
    VK_LINK = os.environ.get('VK_GROUP_LINK', '')
    TG_LINK = os.environ.get('TG_CHANNEL_LINK', '')
except KeyError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            points INTEGER DEFAULT 0,
            invited_count INTEGER DEFAULT 0,
            join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_month_points INTEGER DEFAULT 0
        )''')
        
        conn.commit()
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def reset_monthly_points(context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞"""
    try:
        conn = context.bot_data['conn']
        with conn:
            conn.execute('UPDATE users SET last_month_points = points, points = 0, invited_count = 0')
        logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text="üéâ –ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –∑–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü! –£–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—á–∫–æ–≤: {e}")

async def send_welcome(context: ContextTypes.DEFAULT_TYPE, user_id: int, first_name: str, inviter: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
            "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ:\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ /start\n"
            "2. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã!\n\n"
            f"üéÅ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{inviter}" if inviter else ""
        )
        await context.bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        conn = context.bot_data['conn']
        
        with conn:
            conn.execute(
                'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                (user.id, user.username, user.first_name)
            )
        
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã.\n\n"
            "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        for member in update.message.new_chat_members:
            if member.is_bot:
                continue
                
            inviter = update.message.from_user
            conn = context.bot_data['conn']
            
            with conn:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute(
                    'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                    (member.id, member.username, member.first_name)
                )
                
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                if inviter and inviter.id != member.id and inviter.id not in ADMIN_IDS:
                    conn.execute(
                        'UPDATE users SET points = points + 1, invited_count = invited_count + 1 WHERE user_id = ?',
                        (inviter.id,)
                    )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            await send_welcome(
                context,
                member.id,
                member.first_name,
                inviter.username if inviter else None
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ"""
    await update.message.reply_text(
        "üèÜ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å üèÜ\n\n"
        "üîπ 1 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π = 1 –±–∞–ª–ª\n"
        "üîπ –û—á–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n"
        "üîπ –¢–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã!\n\n"
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /me\n"
        "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /top\n\n"
        f"üìå –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n{VK_LINK}\n{TG_LINK}"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        conn = init_db()
        app = Application.builder().token(BOT_TOKEN).build()
        app.bot_data['conn'] = conn
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("info", info))
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_member))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤
        app.job_queue.run_monthly(
            reset_monthly_points,
            time=time(hour=0, minute=0),
            day=1,
            context=app
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == '__main__':
    main()
