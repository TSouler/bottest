import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue
)
import sqlite3
from dotenv import load_dotenv
from datetime import datetime, time, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))
GROUP_ID = int(os.getenv('GROUP_ID', 0))
VK_LINK = os.getenv('VK_GROUP_LINK', 'https://vk.com/example')
TG_LINK = os.getenv('TG_CHANNEL_LINK', 'https://t.me/example')

if not BOT_TOKEN:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        points INTEGER DEFAULT 0,
        invited_count INTEGER DEFAULT 0,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_month_points INTEGER DEFAULT 0
    )''')
    
    conn.commit()
    return conn

async def reset_monthly_points(context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞"""
    conn = context.bot_data['conn']
    with conn:
        conn.execute('UPDATE users SET last_month_points = points, points = 0, invited_count = 0')
    logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await context.bot.send_message(
        chat_id=GROUP_ID,
        text="üéâ –û—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω—ã! –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞—á–∞–ª—Å—è!"
    )

async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    for member in update.message.new_chat_members:
        if member.is_bot:
            continue
            
        inviter = update.message.from_user
        conn = context.bot_data['conn']
        
        with conn:
            conn.execute(
                'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                (member.id, member.username, member.first_name)
            )
            
            if inviter and inviter.id != member.id and inviter.id not in ADMIN_IDS:
                conn.execute(
                    'UPDATE users SET points = points + 1, invited_count = invited_count + 1 WHERE user_id = ?',
                    (inviter.id,)
                )
        
        try:
            await context.bot.send_message(
                chat_id=member.id,
                text=f"üëã –ü—Ä–∏–≤–µ—Ç, {member.first_name}!\n\n"
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ /start –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    with conn:
        conn.execute(
            'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
            (user.id, user.username, user.first_name)
        )
    
    await update.message.reply_text(
        "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã!\n"
        "–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /me\n"
        "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /top\n"
        "–ü—Ä–∞–≤–∏–ª–∞: /info"
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (/me)"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute(
            'SELECT points, invited_count, last_month_points FROM users WHERE user_id = ?',
            (user.id,)
        )
        result = cursor.fetchone()
    
    if result:
        points, invited, last_month = result
        now = datetime.now()
        next_month = now.replace(day=28) + timedelta(days=4)
        days_left = (next_month - now).days
        
        await update.message.reply_text(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üèÖ –ë–∞–ª–ª—ã: {points}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited}\n"
            f"üèÜ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: {last_month}\n\n"
            f"‚è≥ –î–æ —Å–±—Ä–æ—Å–∞: {days_left} –¥–Ω–µ–π"
        )
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (/top)"""
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute(
            'SELECT first_name, username, points FROM users ORDER BY points DESC LIMIT 10'
        )
        top_users = cursor.fetchall()
    
    if top_users:
        response = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        for i, (first_name, username, points) in enumerate(top_users, 1):
            name = f"@{username}" if username else first_name
            response += f"{i}. {name} - {points} –±–∞–ª–ª–æ–≤\n"
        
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–µ (/info)"""
    await update.message.reply_text(
        "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å\n\n"
        "üîπ 1 –¥—Ä—É–≥ = 1 –±–∞–ª–ª\n"
        "üîπ –û—á–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è 1 —á–∏—Å–ª–∞\n"
        "üîπ –¢–æ–ø-3 –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã\n\n"
        f"üìå –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n{VK_LINK}\n{TG_LINK}"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        conn = init_db()
        
        # –°–æ–∑–¥–∞–µ–º JobQueue –æ—Ç–¥–µ–ª—å–Ω–æ
        job_queue = JobQueue()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º JobQueue –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        job_queue.set_application(app)
        app.job_queue = job_queue
        
        app.bot_data['conn'] = conn
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("me", show_stats))
        app.add_handler(CommandHandler("top", show_top))
        app.add_handler(CommandHandler("info", show_info))
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, send_welcome))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        job_queue.run_monthly(
            reset_monthly_points,
            time=time(hour=0, minute=5),
            day=1,
            context=app
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º JobQueue")
        app.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
    finally:
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
