import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
from dotenv import load_dotenv
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))
GROUP_ID = int(os.getenv('GROUP_ID', 0))
VK_LINK = os.getenv('VK_GROUP_LINK')
TG_LINK = os.getenv('TG_CHANNEL_LINK')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        points INTEGER DEFAULT 0,
        invited_count INTEGER DEFAULT 0,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_month_points INTEGER DEFAULT 0
    )''')
    
    conn.commit()
    return conn

async def reset_monthly_points(context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞"""
    conn = context.bot_data['conn']
    with conn:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏ –≤ last_month_points
        conn.execute('''
        UPDATE users 
        SET last_month_points = points,
            points = 0,
            invited_count = 0
        ''')
    logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")

async def check_monthly_reset(app: Application):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤"""
    now = datetime.now()
    if now.day == 1:
        await reset_monthly_points(app)

def format_contest_info():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ"""
    return (
        "üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å</b> üéâ\n\n"
        "üîπ <b>–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?</b>\n"
        "1. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —á–∞—Ç\n"
        "2. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–∞–ª–ª\n"
        "3. –í –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞ –ø–æ–¥–≤–æ–¥—è—Ç—Å—è –∏—Ç–æ–≥–∏\n"
        "4. –õ—É—á—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã!\n\n"
        "üîπ <b>–í–∞–∂–Ω–æ!</b>\n"
        "‚Ä¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n"
        "‚Ä¢ –û—á–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n"
        "‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!\n\n"
        "üèÜ <b>–ü—Ä–∏–∑—ã:</b>\n"
        "‚Ä¢ 1 –º–µ—Å—Ç–æ: –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ 2 –º–µ—Å—Ç–æ: 500 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ 3 –º–µ—Å—Ç–æ: –°—Ç–∏–∫–µ—Ä–ø–∞–∫\n\n"
        "üìå –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        f"–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {VK_LINK}\n"
        f"Telegram: {TG_LINK}"
    )

async def send_welcome_message(context: ContextTypes.DEFAULT_TYPE, user_id: int, first_name: str, inviter_username: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>\n\n"
        "–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!\n\n"
        "üéÅ –£ –Ω–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å</b>!\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã.\n"
        "1 –¥—Ä—É–≥ = 1 –±–∞–ª–ª\n\n"
        "üîπ <b>–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
        "2. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
        "3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /me\n\n"
        "üìå –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info\n\n"
        f"üì¢ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{inviter_username}" if inviter_username else ""
    )
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=welcome_text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with conn:
        conn.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name) 
        VALUES (?, ?, ?)
        ''', (user.id, user.username, user.first_name))
    
    await update.message.reply_text(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/me - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/info - –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞",
        parse_mode='HTML'
    )

async def handle_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    conn = context.bot_data['conn']
    
    for member in update.message.new_chat_members:
        if member.is_bot:
            continue
            
        inviter = update.message.from_user
        
        with conn:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name) 
            VALUES (?, ?, ?)
            ''', (member.id, member.username, member.first_name))
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            if inviter.id != member.id and inviter.id not in ADMIN_IDS:
                conn.execute('''
                UPDATE users 
                SET points = points + 1, 
                    invited_count = invited_count + 1 
                WHERE user_id = ?
                ''', (inviter.id,))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_welcome_message(
            context,
            member.id,
            member.first_name,
            inviter.username if inviter else None
        )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/me)"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute('''
        SELECT points, invited_count, last_month_points 
        FROM users 
        WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
    
    if result:
        points, invited, last_month = result
        now = datetime.now()
        days_left = (datetime(now.year, now.month % 12 + 1, 1) - now
        
        response = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üèÖ <b>–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:</b> {points}\n"
            f"üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {invited}\n"
            f"üèÜ <b>–ë–∞–ª–ª–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ:</b> {last_month}\n\n"
            f"‚è≥ <b>–î–æ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤:</b> {days_left.days} –¥–Ω–µ–π\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∫–æ–º–∞–Ω–¥–æ–π /info –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã!"
        )
        await update.message.reply_text(response, parse_mode='HTML')
    else:
        await update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —É—á–∞—Å—Ç–∏—è",
            parse_mode='HTML'
        )

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/top)"""
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute('''
        SELECT first_name, username, points 
        FROM users 
        ORDER BY points DESC 
        LIMIT 10
        ''')
        top_users = cursor.fetchall()
    
    if top_users:
        response = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞</b>\n\n"
        for i, (first_name, username, points) in enumerate(top_users, 1):
            name = f"@{username}" if username else first_name
            response += f"{i}. {name} - {points} –±–∞–ª–ª–æ–≤\n"
        
        response += (
            "\nüéÅ <b>–ü—Ä–∏–∑—ã:</b>\n"
            "1 –º–µ—Å—Ç–æ: –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å\n"
            "2 –º–µ—Å—Ç–æ: 500 —Ä—É–±–ª–µ–π\n"
            "3 –º–µ—Å—Ç–æ: –°—Ç–∏–∫–µ—Ä–ø–∞–∫\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info"
        )
        await update.message.reply_text(response, parse_mode='HTML')
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞", parse_mode='HTML')

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–µ (/info)"""
    await update.message.reply_text(
        format_contest_info(),
        parse_mode='HTML'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
        except:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = init_db()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        app.bot_data['conn'] = conn
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("me", show_stats))
        app.add_handler(CommandHandler("top", show_top))
        app.add_handler(CommandHandler("info", show_info))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_members))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤
        job_queue = app.job_queue
        job_queue.run_monthly(
            callback=reset_monthly_points,
            when=datetime.time(hour=0, minute=0),
            day=1,
            context=app
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", exc_info=True)
    finally:
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
