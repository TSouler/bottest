import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
from dotenv import load_dotenv
from datetime import datetime, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    ADMIN_IDS = [int(id) for id in os.environ['ADMIN_IDS'].split(',')]
    GROUP_ID = int(os.environ.get('GROUP_ID', 0))
    VK_LINK = os.environ.get('VK_GROUP_LINK', '—Å—Å—ã–ª–∫–∞_–Ω–µ_—É–∫–∞–∑–∞–Ω–∞')
    TG_LINK = os.environ.get('TG_CHANNEL_LINK', '—Å—Å—ã–ª–∫–∞_–Ω–µ_—É–∫–∞–∑–∞–Ω–∞')
except KeyError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            points INTEGER DEFAULT 0,
            invited_count INTEGER DEFAULT 0,
            join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_month_points INTEGER DEFAULT 0
        )''')
        
        conn.commit()
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def reset_monthly_points(context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞"""
    try:
        conn = context.bot_data['conn']
        with conn:
            conn.execute('UPDATE users SET last_month_points = points, points = 0, invited_count = 0')
        logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text="üéâ –ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –∑–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü! –£–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—á–∫–æ–≤: {e}")

async def send_welcome_message(user_id: int, first_name: str, context: ContextTypes.DEFAULT_TYPE, inviter_username: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
            "üéÅ –£ –Ω–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å:\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ\n\n"
            f"üì¢ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{inviter_username}\n\n" if inviter_username else ""
            "üèÜ –õ—É—á—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!\n"
            "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info"
        )
        await context.bot.send_message(
            chat_id=user_id,
            text=welcome_text
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        conn = context.bot_data['conn']
        
        with conn:
            conn.execute(
                'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                (user.id, user.username, user.first_name)
            )
        
        await update.message.reply_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –≤ —á–∞—Ç\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (/me)\n\n"
            "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /top\n"
            "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞: /info"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        for member in update.message.new_chat_members:
            if member.is_bot:
                continue
                
            inviter = update.message.from_user
            conn = context.bot_data['conn']
            
            with conn:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute(
                    'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                    (member.id, member.username, member.first_name)
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                if inviter and inviter.id != member.id and inviter.id not in ADMIN_IDS:
                    conn.execute(
                        'UPDATE users SET points = points + 1, invited_count = invited_count + 1 WHERE user_id = ?',
                        (inviter.id,)
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_welcome_message(
                member.id,
                member.first_name,
                context,
                inviter.username if inviter else None
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/me)"""
    try:
        user = update.effective_user
        conn = context.bot_data['conn']
        
        with conn:
            cursor = conn.execute(
                'SELECT points, invited_count, last_month_points FROM users WHERE user_id = ?',
                (user.id,)
            )
            result = cursor.fetchone()
        
        if result:
            points, invited, last_month = result
            now = datetime.now()
            next_month = now.replace(day=28) + timedelta(days=4)  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥. –º–µ—Å—è—Ü–∞
            days_left = (next_month - now).days
            
            response = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üèÖ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: {points}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited}\n"
                f"üèÜ –ë–∞–ª–ª–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ: {last_month}\n\n"
                f"‚è≥ –î–æ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤: {days_left} –¥–Ω–µ–π\n\n"
                "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤!"
            )
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /me: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (/top)"""
    try:
        conn = context.bot_data['conn']
        
        with conn:
            cursor = conn.execute(
                'SELECT first_name, username, points FROM users ORDER BY points DESC LIMIT 10'
            )
            top_users = cursor.fetchall()
        
        if top_users:
            response = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞:\n\n"
            for i, (first_name, username, points) in enumerate(top_users, 1):
                name = f"@{username}" if username else first_name
                response += f"{i}. {name} - {points} –±–∞–ª–ª–æ–≤\n"
            
            response += (
                "\nüéÅ –ü—Ä–∏–∑—ã:\n"
                "ü•á 1 –º–µ—Å—Ç–æ: –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å\n"
                "ü•à 2 –º–µ—Å—Ç–æ: 500 —Ä—É–±–ª–µ–π\n"
                "ü•â 3 –º–µ—Å—Ç–æ: –°—Ç–∏–∫–µ—Ä–ø–∞–∫\n\n"
                "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info"
            )
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /top: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–µ (/info)"""
    try:
        info_text = (
            "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å üéÅ\n\n"
            "üîπ –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n\n"
            "üîπ –ü—Ä–∞–≤–∏–ª–∞:\n"
            "‚Ä¢ –û—á–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n"
            "‚Ä¢ –ü—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥–∏ —Ç–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ\n\n"
            "üèÜ –ü—Ä–∏–∑—ã:\n"
            "‚Ä¢ 1 –º–µ—Å—Ç–æ: –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å (1 –º–µ—Å—è—Ü)\n"
            "‚Ä¢ 2 –º–µ—Å—Ç–æ: 500 —Ä—É–±–ª–µ–π\n"
            "‚Ä¢ 3 –º–µ—Å—Ç–æ: –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n\n"
            f"üìå –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n{VK_LINK}\n{TG_LINK}"
        )
        await update.message.reply_text(info_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /info: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        conn = init_db()
        
        app = ApplicationBuilder() \
            .token(BOT_TOKEN) \
            .job_queue(None) \
            .build()
            
        app.bot_data['conn'] = conn
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("me", show_stats))
        app.add_handler(CommandHandler("top", show_top))
        app.add_handler(CommandHandler("info", show_info))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_member))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤
        app.job_queue.run_monthly(
            reset_monthly_points,
            time=time(hour=0, minute=0),
            day=1,
            context=app
        )
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
    finally:
        if 'conn' in locals():
            conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == '__main__':
    from datetime import timedelta  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã days_left
    main()
