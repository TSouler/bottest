import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))
GROUP_ID = int(os.getenv('GROUP_ID', 0))
VK_LINK = os.getenv('VK_GROUP_LINK')
TG_LINK = os.getenv('TG_CHANNEL_LINK')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        points INTEGER DEFAULT 0,
        invited_count INTEGER DEFAULT 0,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    conn.commit()
    return conn

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with conn:
        conn.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name) 
        VALUES (?, ?, ?)
        ''', (user.id, user.username, user.first_name))
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ!\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º:\n"
        f"üîπ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {VK_LINK}\n"
        f"üîπ Telegram: {TG_LINK}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/me - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –ª—É—á—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
    )
    
    await update.message.reply_text(welcome_text)

async def handle_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    conn = context.bot_data['conn']
    
    for member in update.message.new_chat_members:
        if member.is_bot:
            continue
            
        inviter = update.message.from_user
        
        with conn:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name) 
            VALUES (?, ?, ?)
            ''', (member.id, member.username, member.first_name))
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            if inviter.id != member.id and inviter.id not in ADMIN_IDS:
                conn.execute('''
                UPDATE users 
                SET points = points + 1, 
                    invited_count = invited_count + 1 
                WHERE user_id = ?
                ''', (inviter.id,))
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
        welcome_text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}! üéâ\n\n"
            f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª @{inviter.username if inviter.username else '—É—á–∞—Å—Ç–Ω–∏–∫'}\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
            f"üîπ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {VK_LINK}\n"
            f"üîπ Telegram: {TG_LINK}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /me –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
        try:
            await context.bot.send_message(
                chat_id=member.id,
                text=welcome_text
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/me)"""
    user = update.effective_user
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute('''
        SELECT points, invited_count 
        FROM users 
        WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
    
    if result:
        points, invited = result
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.first_name}:\n\n"
            f"‚Ä¢ üèÖ –í–∞—à–∏ –±–∞–ª–ª—ã: {points}\n"
            f"‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited}\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã!\n"
            f"–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n{VK_LINK}\n{TG_LINK}"
        )
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/top)"""
    conn = context.bot_data['conn']
    
    with conn:
        cursor = conn.execute('''
        SELECT first_name, username, points 
        FROM users 
        ORDER BY points DESC 
        LIMIT 10
        ''')
        top_users = cursor.fetchall()
    
    if top_users:
        response = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        for i, (first_name, username, points) in enumerate(top_users, 1):
            name = f"@{username}" if username else first_name
            response += f"{i}. {name} - {points} –±–∞–ª–ª–æ–≤\n"
        
        response += f"\n–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n{VK_LINK}\n{TG_LINK}"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = init_db()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        app.bot_data['conn'] = conn
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("me", show_stats))
        app.add_handler(CommandHandler("top", show_top))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_members))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", exc_info=True)
    finally:
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
